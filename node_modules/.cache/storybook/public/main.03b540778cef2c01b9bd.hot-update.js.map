{"version":3,"file":"main.03b540778cef2c01b9bd.hot-update.js","sources":["webpack:///./src/components/Pagination/Pagination.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/stories/Pagination.stories.jsx"],"sourcesContent":["import { React } from 'react';\nimport { classnames } from 'classnames';\nimport { usePagination, DOTS } from '../../hooks/usePagination';\nimport './pagination.scss';\n\nconst Pagination = props => {\n    const {\n        onPageChange,\n        totalCount,\n        siblingCount = 1,\n        currentPage,\n        pageSize,\n        className\n    } = props;\n\n    const paginationRange = usePagination({\n        currentPage,\n        totalCount,\n        siblingCount,\n        pageSize,\n    });\n\n  // If there are less than 2 itmes in pagination range we shall not render the component\n\n    if (currentPage === 0 || paginationRange.length< 2) {\n        return null;\n    }\n    const onNext = () => {\n        onPageChange(currentPage + 1);\n    };\n    const onPrevious = () => {\n        onPageChange(currentPage - 1);\n    };\n    \n    let lastPage = paginationRange[paginationRange.length - 1];\n    return (\n        <ul className={classnames('pagination-container', { [className]: className })}\n        >\n        <li\n            className={classNames('pagination-item', {disabled: currentPage === 1\n            })}\n            onClick={onPrevious}\n        >\n            <div className='arrow left'/>\n        </li>\n        {paginationRange.map(pageNumber => {\n            if (pageNumber === DOTS) {\n                return <li className= \"pagination-item dots\">&#8230;</li>;\n            }\n            return (\n                <li\n                    className={classnames('pagination-item', {\n                        selected: pageNumber === currentPage\n                    })}\n                    onClick={() => onPageChange(pageNumber)}\n                >\n                {pageNumber}\n                </li>\n            );\n        })}\n        <li className={classnames('pagination-item', {\n            disabled: currentPage === lastPage\n        })}\n        onClick={onNext}\n        >\n        <div className='arrow right'/>\n        </li>\n        </ul>\n        // end of pagination\n    );\n};\n\nexport default Pagination;\n","export * from './Pagination';","import React from 'react';\nimport { useMemo } from 'react';\n\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n    let length = end - start + 1;\n    return Array.from({ length }, (_, idx) => idx + start);\n  };\n\nexport const usePagination = ({\n    totalCount,\n    pageSize,\n    siblingCount,\n    currentPage\n}) => {\n    const paginationRange = useMemo(() => {\n        // pagination logic\n\n        const totalPageCount = Math.ceil(totalCount / pageSize);\n\n        const totalPageNumbers = siblingCount + 5;\n\n        if (totalPageNumbers >= totalPageCount) {\n            return range(1, totalPageCount)\n        }\n\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n        const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageNumbers);\n\n        const shouldShowLeftDots = leftSiblingIndex > 2;\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n        const firstPageIndex = 1;\n        const lastPageIndex = totalPageCount;\n\n        if (!shouldShowLeftDots && shouldShowRightDots) {\n            let leftItemCount = 3 + 2 * siblingCount;\n            let leftRange = range(1, leftItemCount);\n\n            return [...leftRange, DOTS, totalPageCount];\n        }\n\n        if (shouldShowLeftDots && !shouldShowRightDots) {\n            let rightItemCount = 3 + 2 * siblingCount;\n            let rightRange = range(\n                totalPageCount - rightItemCount + 1, totalPageCount\n            );\n            return [firstPageIndex, DOTS, ...rightRange];\n        }\n\n        if (shouldShowLeftDots && shouldShowRightDots) {\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n        }\n\n    }, [totalCount, pageSize, siblingCount, currentPage])\n\n    return paginationRange;\n}","import React, { useState, useMemo } from 'react';\nimport { Pagination } from '../components/Pagination';\n\n\nlet PageSize = 10;\n\nexport default function App() {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const currentTableData = useMemo(() => {\n    const firstPageIndex = (currentPage - 1) * PageSize;\n    const lastPageIndex = firstPageIndex + PageSize;\n    return data.slice(firstPageIndex, lastPageIndex);\n  }, [currentPage]);\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>FIRST NAME</th>\n            <th>LAST NAME</th>\n            <th>EMAIL</th>\n            <th>PHONE</th>\n          </tr>\n        </thead>\n        <tbody>\n          {currentTableData.map(item => {\n            return (\n              <tr>\n                <td>{item.id}</td>\n                <td>{item.first_name}</td>\n                <td>{item.last_name}</td>\n                <td>{item.email}</td>\n                <td>{item.phone}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <Pagination\n        className=\"pagination-bar\"\n        currentPage={currentPage}\n        totalCount={data.length}\n        pageSize={PageSize}\n        onPageChange={page => setCurrentPage(page)}\n      />\n    </>\n  );\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACxEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AAHA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}